# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.permittedInsecurePackages = [
                "openssl-1.1.1u"
		"python-2.7.18.6"
];
hardware.opengl.driSupport32Bit = true;
hardware.pulseaudio.support32Bit = true;
nixpkgs.config.allowUnfreePredicate = (pkg: builtins.elem (builtins.parseDrvName pkg.name).name [ "steam" ]);
#nix.settings = {
  #  substituters = ["https://nix-gaming.cachix.org"];
 #   trusted-public-keys = ["nix-gaming.cachix.org-1:nbjlureqMbRAxR1gJ/f3hxemL9svXaZF/Ees8vCUUs4="];
  #};


  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Asia/Kuwait";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "ar_KW.UTF-8";
    LC_IDENTIFICATION = "ar_KW.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "ar_KW.UTF-8";
    LC_NAME = "ar_KW.UTF-8";
    LC_NUMERIC = "ar_KW.UTF-8";
    LC_PAPER = "ar_KW.UTF-8";
    LC_TELEPHONE = "ar_KW.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = "us";
    xkbVariant = "";
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.knighty = {
    isNormalUser = true;
    description = "mjknight";
    extraGroups = [ "networkmanager" "wheel" ];
    };

    #  thunderbird
# List packages installed in the system profile. To search, run:
# $ nix search wget

environment.systemPackages = with pkgs; [
    # Text Editors
   # vim
   # neovim
    # Web Browsers
    brave
    # Terminal Utilities
    wget
    w3m
    dmenu
    autojump
    starship
    elinks
    eww
    kitty
    st
    sxhkd
    terminus-nerdfont
  # System Info and Monitoring
    neofetch
    # Development Tools
    clang-tools_9
    cargo
    luarocks
    ninja
    python3Full
    python.pkgs.pip
    ripgrep
    # Graphics / Image Viewers / Editors
    celluloid
    gimp
    nomacs
    # Version Control
    git
    github-desktop
    gh
    # Gaming
  #  lutris
 #   mangohud
  #  steam
   # steam-run

    # Video Editing
#    davinci-resolve
    # Window Managers / Desktop Environment Components
    bspwm
    dwm
    dunst
    picom
    sxhkd
    variety
    xfce.thunar
    xorg.xinit
    xorg.xinput
    xdg-desktop-portal-gtk
    # Fonts
    fontconfig
    freetype
    # Audio Control
    pavucontrol
    # System Utilities
    flatpak
    nfs-utils
    trash-cli
    unzip
    # Security / Encryption
    openssl
    polkit_gnome
    powershell
    # Overlays and Overrides
    #(lutris.override {
     #   extraPkgs = pkgs: [
            # List package dependencies here
      #      wineWowPackages.stable
       #     winetricks
     #   ];
    #})
];
nixpkgs.overlays = [
    (final: prev: {
        dwm = prev.dwm.overrideAttrs (old: { src = /home/knighty/GitHub ;});
    })
];

  ## Gaming
#	programs.steam = {
#	  enable = true;
#	  remotePlay.openFirewall = true; # Open ports in the firewall for Steam Remote Play
#	  dedicatedServer.openFirewall = true; # Open ports in the firewall for Source Dedicated Server
	#};


  # List services that you want to enable:
  virtualisation.libvirtd.enable = true;
  # enable flatpak support
  services.flatpak.enable = true;
  services.dbus.enable = true;
  xdg.portal = {
    enable = true;
    # wlr.enable = true;
    # gtk portal needed to make gtk apps happy
    extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
  };
  security.polkit.enable = true;
systemd = {
  user.services.polkit-gnome-authentication-agent-1 = {
    description = "polkit-gnome-authentication-agent-1";
    wantedBy = [ "graphical-session.target" ];
    wants = [ "graphical-session.target" ];
    after = [ "graphical-session.target" ];
    serviceConfig = {
        Type = "simple";
        ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
        Restart = "on-failure";
        RestartSec = 1;
        TimeoutStopSec = 10;
      };
  };
   extraConfig = ''
     DefaultTimeoutStopSec=10s
   '';
};


# Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
#   environment.systemPackages = with pkgs; [
#   #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
#   #  wget
#   ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;
  networking.firewall.enable = false;
  networking.enableIPv6 = false;


fonts = {
    fonts = with pkgs; [
      noto-fonts
      noto-fonts-cjk
      noto-fonts-emoji
      font-awesome
      source-han-sans
      source-han-sans-japanese
      source-han-serif-japanese
      (nerdfonts.override { fonts = [ "Meslo" ]; })
    ];
    fontconfig = {
      enable = true;
      defaultFonts = {
	      monospace = [ "Meslo LG M Regular Nerd Font Complete Mono" ];
	      serif = [ "Noto Serif" "Source Han Serif" ];
	      sansSerif = [ "Noto Sans" "Source Han Sans" ];
      };
    };
};

 # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  system.copySystemConfiguration = true;
  system.autoUpgrade.enable = true;
  system.autoUpgrade.allowReboot = true;
  system.autoUpgrade.channel = "https://channels.nixos.org/nixos-23.05";

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

}

